//Reminder
//— Keywords and punctuation are in bold text.
//— Syntactic categories are named in non-bold text.
//— A vertical bar ( | ) separates alternatives.
//— Square brackets ( [ ] ) enclose optional items.
//— Braces ( { } ) enclose items which can be repeated zero or more times
// {} -> * [] -> ?

//used https://inst.eecs.berkeley.edu/~cs150/fa06/Labs/verilog-ieee.pdf as reference, this is verilog 2001

//A.1 Source Text
//A.1.1 Library source text #maybe_later
//A.1.2 Configuratino source text #maybe_later

//A.1.3 Module and primitive source text
?source_text: description*
?description: module_declaration
//    | udp_declaration
module_declaration: attribute_instance* module_keyword module_identifier module_parameter_port_list? list_of_ports? ";" module_item* "endmodule"
    | attribute_instance* module_keyword module_identifier module_parameter_port_list? list_of_port_declarations? ";" non_port_module_item* "endmodule"
module_keyword: "module" | "macromodule"

//A.1.4 Module parameters and ports
module_parameter_port_list: "#" "(" parameter_declaration ("," parameter_declaration)* ")"
list_of_ports: "(" port ("," port)* ")"
list_of_port_declarations: "(" port_declaration ("," port_declaration)* ")"
    | "(" ")"
port: port_expression?
    | "." port_identifier "(" port_expression? ")"
port_expression: port_reference
    | "{" port_reference ("," port_reference)* "}"
port_reference: port_identifier
    | port_identifier "[" constant_expression "]"
    | port_identifier "[" range_expression "]"
port_declaration: attribute_instance* inout_declaration
    | attribute_instance* input_declaration
    | attribute_instance* output_declaration

//A.1.5 Module items
module_item: module_or_generate_item
    | port_declaration ";"
//    | attribute_instance* generated_instantiation
    | attribute_instance* local_parameter_declaration
    | attribute_instance* parameter_declaration
//    | attribute_instance* specify_block
//    | attribute_instance* specparam_declaration
module_or_generate_item: attribute_instance* module_or_generate_item_declaration
//    | attribute_instance* parameter_override
    | attribute_instance* continuous_assign
//    | attribute_instance* gate_instantiation
//    | attribute_instance* udp_instantiation
    | attribute_instance* module_instantiation
    | attribute_instance* initial_construct
    | attribute_instance* always_construct
module_or_generate_item_declaration: net_declaration
    | reg_declaration
    | integer_declaration
//    | real_declaration
//    | time_declaration
//    | realtime_declaration
//    | event_declaration
//    | genvar_declaration
//    | task_declaration
//    | function_declaration
non_port_module_item: //attribute_instance* generated_instantiation
    | attribute_instance* local_parameter_declaration
    | attribute_instance* module_or_generate_item
    | attribute_instance* parameter_declaration
//    | attribute_instance* specify_block
    | attribute_instance* specparam_declaration
parameter_override: "defparam" list_of_param_assignments ";"

//A.2 Declarations
//A.2.1 Declaration types
//A.2.1.1 Module parameter declarations
local_parameter_declaration: "localparam" "signed"? range? list_of_param_assignments ";"
    | "localparam" "integer" list_of_param_assignments ";"
    | "localparam" "real" list_of_param_assignments ";"
    | "localparam" "time" list_of_param_assignments ";"
parameter_declaration: "parameter" "signed"? range? list_of_param_assignments ";"
    | "parameter" "integer" list_of_param_assignments ";"
    | "parameter" "real" list_of_param_assignments ";"
    | "parameter" "realtime" list_of_param_assignments ";"
    | "parameter" "time" list_of_param_assignments ";"
specparam_declaration: "specparam" range? list_of_specparam_assignments ";"

//A2.1.2
inout_declaration: "inout" net_type? "signed"? range? list_of_port_identifiers
input_declaration: "input" net_type? "signed"? range? list_of_port_identifiers
output_declaration: "output" net_type? "signed"? range? list_of_port_identifiers
    | "output" "reg"? "signed"? range? list_of_port_identifiers
    | "output" "reg" "signed"? range? list_of_variable_port_identifiers
    | "output" output_variable_type? list_of_port_identifiers
    | "output" output_variable_type list_of_variable_port_identifiers

//A.2.1.3 Type declarations
event_declaration: "event" list_of_event_identifiers ";"
genvar_declaration: "genvar" list_of_genvar_identifiers ";"
integer_declaration: "integer" list_of_variable_identifiers ";"
net_declaration: net_type "signed"? delay3? list_of_net_identifiers ";"
    | net_type drive_strength? "signed"? delay3? list_of_net_decl_assignments ";"
    | net_type ("vectored" | "scalared")? "signed"? range delay3? list_of_net_identifiers ";"
    | net_type drive_strength? ("vectored" | "scalared")?  "signed"? range delay3? list_of_net_decl_assignments ";"
    | "trireg" charge_strength? "signed"? delay3? list_of_net_identifiers ";"	
    | "trireg" drive_strength? "signed"? delay3? list_of_net_decl_assignments ";"
    | "trireg" charge_strength? ("vectored" | "scalared")? "signed"? range delay3? list_of_net_identifiers ";"
    | "trireg" drive_strength? ("vectored" | "scalared")? "signed"? range delay3? list_of_net_decl_assignments ";"
real_declaration: "real" list_of_real_identifiers ";"
realtime_declaration: "realtime" list_of_real_identifiers ";"
reg_declaration: "reg" "signed"? range? list_of_variable_identifiers ";"
time_declaration: "time" list_of_variable_identifiers ";"

//A.2.2 Declaration data types
//A.2.2.1 Net and variable types
net_type: "supply0" | "supply1" | "tri" | "triand" | "trior" | "tri0" | "tri1" | "wire" | "wand" | "wor"
output_variable_type: "integer" | "time"
real_type: real_identifier ("=" constant_expression)?
    | real_identifier dimension dimension*
variable_type: variable_identifier ("=" constant_expression)?
    | variable_identifier dimension dimension* 

//A.2.2.2 Strengths
drive_strength: "(" strength0 "," strength1 ")"
    | "(" strength1 "," strength0 ")"
    | "(" strength0 "," "highz1" ")"
    | "(" strength1 "," "highz0" ")"
    | "(" "highz0" "," strength1 ")"
    | "(" "highz1" "," strength0 ")"
strength0: "supply0" | "strong0" | "pull0" | "weak0"
strength1: "supply1" | "strong1" | "pull1" | "weak1"
charge_strength: "(" "small" ")" | "(" "medium" ")" | "(" "large" ")"

//A.2.2.3 Delays
delay3: "#" delay_value | "#" "(" delay_value ("," delay_value ("," delay_value)?)? ")"
delay2: "#" delay_value | "#" "(" delay_value ("," delay_value)? ")"
delay_value: unsigned_number
    | parameter_identifier
    | specparam_identifier
    | mintypmax_expression 

//A.2.3 Declaration lists
list_of_event_identifiers: event_identifier (dimension dimension*)? ("," event_identifier (dimension dimension*)?)*
list_of_genvar_identifiers: genvar_identifier ("," genvar_identifier)*
list_of_net_decl_assignments: net_decl_assignment ("," net_decl_assignment)*
list_of_net_identifiers: net_identifier (dimension dimension*)? ("," net_identifier (dimension dimension*)?)*
list_of_param_assignments: param_assignment ("," param_assignment)*
list_of_port_identifiers: port_identifier ("," port_identifier)*
list_of_real_identifiers: real_type ("," real_type)*
list_of_specparam_assignments: specparam_assignment ("," specparam_assignment)*
list_of_variable_identifiers: variable_type ("," variable_type)*
list_of_variable_port_identifiers: port_identifier ("=" constant_expression)? ("," port_identifier ("=" constant_expression)?)*

//A.2.4 Declaration assignments
net_decl_assignment: net_identifier "=" expression
param_assignment: parameter_identifier "=" constant_expression
specparam_assignment: specparam_identifier "=" constant_mintypmax_expression
    | pulse_control_specparam
pulse_control_specparam: "PATHPULSE$" "=" "(" reject_limit_value ("," error_limit_value)? ")" ";"
    | "PATHPULSE$" specify_input_terminal_descriptor "$" specify_output_terminal_descriptor "=" "(" reject_limit_value ("," error_limit_value)? ")" ";"
error_limit_value: limit_value
reject_limit_value: limit_value
limit_value: constant_mintypmax_expression 

//A.2.5
dimension: "[" dimension_constant_expression ":" dimension_constant_expression "]"
range: "[" msb_constant_expression ":" lsb_constant_expression "]"

//A.2.8 Block item declarations
block_item_declaration: attribute_instance* block_reg_declaration
    | attribute_instance* event_declaration
    | attribute_instance* integer_declaration
    | attribute_instance* local_parameter_declaration
    | attribute_instance* parameter_declaration
    | attribute_instance* real_declaration
    | attribute_instance* realtime_declaration
    | attribute_instance* time_declaration
block_reg_declaration: "reg" "signed"? range? list_of_block_variable_identifiers ";"
list_of_block_variable_identifiers: block_variable_type ("," block_variable_type)*
block_variable_type: variable_identifier
    | variable_identifier dimension dimension* 

//A.4 Module and generated instantiation
//A.4.1 Module instantiation
module_instantiation: module_identifier parameter_value_assignment? module_instance ("," module_instance)* ";"
parameter_value_assignment: "#" "(" list_of_parameter_assignments ")"
list_of_parameter_assignments: ordered_parameter_assignment ("," ordered_parameter_assignment)*
    | named_parameter_assignment ("," named_parameter_assignment)*
ordered_parameter_assignment: expression
named_parameter_assignment: "." parameter_identifier "(" expression? ")"
module_instance: name_of_instance "(" list_of_port_connections? ")"
name_of_instance: module_instance_identifier range?
list_of_port_connections: ordered_port_connection ("," ordered_port_connection)*
    | named_port_connection ("," named_port_connection)*
ordered_port_connection: attribute_instance* expression?
named_port_connection: attribute_instance* "." port_identifier "(" expression? ")"

//A.6 Behavioral statements
//A.6.1
continuous_assign: "assign" drive_strength? delay3? list_of_net_assignments ";"
list_of_net_assignments: net_assignment ("," net_assignment)*
net_assignment: net_lvalue "=" expression

//A.6.2 Procedural blocks and assignments
initial_construct: "initial" statement
always_construct: "always" statement
blocking_assignment: variable_lvalue "=" delay_or_event_control? expression
nonblocking_assignment: variable_lvalue "<=" delay_or_event_control? expression
procedural_continuous_assignments: "assign" variable_assignment
    | "deassign" variable_lvalue
    | "force" variable_assignment
    | "force" net_assignment
    | "release" variable_lvalue
    | "release" net_lvalue
function_blocking_assignment: variable_lvalue "=" expression
function_statement_or_null: function_statement
    | attribute_instance* ";"

//A.6.3 Parallel and sequential blocks
function_seq_block: "begin" (":" block_identifier block_item_declaration*)? function_statement* "end"
variable_assignment: variable_lvalue "=" expression
par_block: "fork" (":" block_identifier block_item_declaration*)? statement* "join"
seq_block: "begin" (":" block_identifier block_item_declaration*)? statement* "end"

//A.6.4 Statements
statement: attribute_instance* blocking_assignment ";"
    | attribute_instance* case_statement
    | attribute_instance* conditional_statement
    | attribute_instance* disable_statement
    | attribute_instance* event_trigger
    | attribute_instance* loop_statement
    | attribute_instance* nonblocking_assignment ";"
    | attribute_instance* par_block
    | attribute_instance* procedural_continuous_assignments ";"
    | attribute_instance* procedural_timing_control_statement
    | attribute_instance* seq_block
//    | attribute_instance* system_task_enable
//    | attribute_instance* task_enable
    | attribute_instance* wait_statement
statement_or_null: statement
    | attribute_instance* ";"
function_statement: attribute_instance* function_blocking_assignment ";"
    | attribute_instance* function_case_statement
    | attribute_instance* function_conditional_statement
    | attribute_instance* function_loop_statement
    | attribute_instance* function_seq_block
    | attribute_instance* disable_statement
//    | attribute_instance* system_task_enable

//A.6.5 Timing control statements
delay_control: "#" delay_value
    | "#" "(" mintypmax_expression ")"
delay_or_event_control: delay_control
    | event_control
    | "repeat" "(" expression ")" event_control
disable_statement: "disable" hierarchical_task_identifier ";"
    | "disable" hierarchical_block_identifier ";"
event_control: "@" event_identifier
    | "@" "(" event_expression ")"
    | "@" "*"
    | "@" "(" "*" ")"
event_trigger: "->" hierarchical_event_identifier ";"
event_expression: expression
    | hierarchical_identifier
    | "posedge" expression
    | "negedge" expression
    | event_expression "or" event_expression
    | event_expression "," event_expression
procedural_timing_control_statement: delay_or_event_control statement_or_null
wait_statement: "wait" "(" expression ")" statement_or_null

//A.6.6 Conditional statements
!conditional_statement: "if" "(" expression ")" statement_or_null ("else" statement_or_null)?
    | if_else_if_statement
if_else_if_statement: "if" "(" expression ")" statement_or_null ("else if" "(" expression ")" statement_or_null)* ("else" statement_or_null)?
function_conditional_statement: "if" "(" expression ")" function_statement_or_null ("else" function_statement_or_null)?
    | function_if_else_if_statement
function_if_else_if_statement: "if" "(" expression ")" function_statement_or_null ("else if" "(" expression ")" function_statement_or_null)* ("else" function_statement_or_null)? 

//A.6.7 Case statements
case_statement: "case" "(" expression ")" case_item case_item* "endcase"
    | "casez" "(" expression ")" case_item case_item* "endcase"
    | "casex" "(" expression ")" case_item case_item* "endcase"
case_item: expression ("," expression )* ":" statement_or_null
    | "default" ":"? statement_or_null
function_case_statement: "case" "(" expression ")" function_case_item function_case_item* "endcase"
    | "casez" "(" expression ")" function_case_item function_case_item* "endcase"
    | "casex" "(" expression ")" function_case_item function_case_item* "endcase"
function_case_item: expression ("," expression)* ":" function_statement_or_null
    | "default" ":"? function_statement_or_null 

//A.6.8 Looping statements
function_loop_statement: "forever" function_statement
    | "repeat" "(" expression ")" function_statement
    | "while" "(" expression ")" function_statement
    | "for" "(" variable_assignment ";" expression ";" variable_assignment ")" function_statement
loop_statement: "forever" statement
    | "repeat" "(" expression ")" statement
    | "while" "(" expression ")" statement
    | "for" "(" variable_assignment ";" expression ";" variable_assignment ")" statement 

//A.7 Specify section
//A.7.1 Specify block declaration
//specify_block: "specify" specify_item* "endspecify"
//specify_item: specparam_declaration
//    | pulsestyle_declaration
//    | showcancelled_declaration
//    | path_declaration
//    | system_timing_check
//pulsestyle_declaration: "pulsestyle_onevent" list_of_path_outputs ";"
//    | "pulsestyle_ondetect" list_of_path_outputs ";"
//showcancelled_declaration: "showcancelled" list_of_path_outputs ";"
//    | "noshowcancelled" list_of_path_outputs ";" 

//A.7.3
specify_input_terminal_descriptor: input_identifier
    | input_identifier "[" constant_expression "]"
    | input_identifier "[" range_expression "]"
specify_output_terminal_descriptor: output_identifier
    | output_identifier "[" constant_expression "]"
    | output_identifier "[" range_expression "]"
input_identifier: input_port_identifier | inout_port_identifier
output_identifier: output_port_identifier | inout_port_identifier 

//A.8 Expressions
//A.8.1 Concatenations
concatenation: "{" expression ("," expression)* "}"
constant_concatenation: "{" constant_expression ("," constant_expression)* "}"
constant_multiple_concatenation: "{" constant_expression constant_concatenation "}"
module_path_concatenation: "{" module_path_expression ("," module_path_expression)* "}"
module_path_multiple_concatenation: "{" constant_expression module_path_concatenation "}"
multiple_concatenation: "{" constant_expression concatenation "}"
net_concatenation: "{" net_concatenation_value ("," net_concatenation_value)* "}"
net_concatenation_value: hierarchical_net_identifier
    | hierarchical_net_identifier "[" expression "]" ("[" expression "]")*
    | hierarchical_net_identifier "[" expression "]" ("[" expression "]")* "[" range_expression "]"
    | hierarchical_net_identifier "[" range_expression "]"
    | net_concatenation
variable_concatenation: "{" variable_concatenation_value ("," variable_concatenation_value)* "}"
variable_concatenation_value: hierarchical_variable_identifier
    | hierarchical_variable_identifier "[" expression "]" ("[" expression "]")*
    | hierarchical_variable_identifier "[" expression "]" ("[" expression "]")* "[" range_expression "]"
    | hierarchical_variable_identifier "[" range_expression "]"
    | variable_concatenation

//A.8.2 Function calls
constant_function_call: function_identifier attribute_instance* "(" constant_expression ("," constant_expression)* ")"
function_call: hierarchical_function_identifier attribute_instance* "(" expression ("," expression)* ")"
genvar_function_call: genvar_function_identifier attribute_instance* "(" constant_expression ("," constant_expression)* ")" 
system_function_call: system_function_identifier ("(" expression ("," expression)* ")")?

//A.8.3 Expressions
base_expression: expression
conditional_expression: expression1 "?" attribute_instance* expression2 ":" expression3
constant_base_expression: constant_expression
constant_expression: constant_primary
    | UNARY_OPERATOR attribute_instance* constant_primary
    | constant_expression BINARY_OPERATOR attribute_instance* constant_expression
    | constant_expression "?" attribute_instance* constant_expression ":" constant_expression
    | string
constant_mintypmax_expression: constant_expression
    | constant_expression ":" constant_expression ":" constant_expression
constant_range_expression: constant_expression
    | msb_constant_expression ":" lsb_constant_expression
    | constant_base_expression "+:" width_constant_expression
    | constant_base_expression "-:" width_constant_expression
dimension_constant_expression: constant_expression
expression1: expression
expression2: expression
expression3: expression
?expression: primary
    | UNARY_OPERATOR attribute_instance* primary
    | expression BINARY_OPERATOR attribute_instance* expression
    | conditional_expression
    | string
lsb_constant_expression: constant_expression
mintypmax_expression: expression
    | expression ":" expression ":" expression
module_path_conditional_expression: module_path_expression "?" attribute_instance* module_path_expression ":" module_path_expression
module_path_expression: module_path_primary
    | unary_module_path_operator attribute_instance* module_path_primary
    | module_path_expression binary_module_path_operator attribute_instance* module_path_expression
    | module_path_conditional_expression
module_path_mintypmax_expression: module_path_expression
    | module_path_expression ":" module_path_expression ":" module_path_expression
msb_constant_expression: constant_expression
range_expression: expression
    | msb_constant_expression ":" lsb_constant_expression
    | base_expression "+:" width_constant_expression
    | base_expression "-:" width_constant_expression
width_constant_expression: constant_expression 

//A.8.4 Primaries
constant_primary: constant_concatenation
    | constant_function_call
    | "(" constant_mintypmax_expression ")"
    | constant_multiple_concatenation
    | genvar_identifier
    | number
    | parameter_identifier
    | specparam_identifier
module_path_primary: number
    | identifier
    | module_path_concatenation
    | module_path_multiple_concatenation
    | function_call
    | system_function_call
    | constant_function_call
    | "(" module_path_mintypmax_expression ")"
!?primary: number
    | hierarchical_identifier
    | hierarchical_identifier "[" expression "]" ("[" expression "]")*
    | hierarchical_identifier "[" expression "]" ("[" expression "]")* "[" range_expression "]"
    | hierarchical_identifier "[" range_expression "]"
    | concatenation
    | multiple_concatenation
    | function_call
    | system_function_call
    | constant_function_call
    | "(" mintypmax_expression ")" 

//A.8.5 Expression left-side values
net_lvalue: hierarchical_net_identifier
    | hierarchical_net_identifier "[" constant_expression "]" ("[" constant_expression "]")*
    | hierarchical_net_identifier "[" constant_expression "]" ("[" constant_expression "]" )* "[" constant_range_expression "]"
    | hierarchical_net_identifier "[" constant_range_expression "]"
    | net_concatenation
variable_lvalue: hierarchical_variable_identifier
    | hierarchical_variable_identifier "[" expression "]" ("[" expression "]")*
    | hierarchical_variable_identifier "[" expression "]" ("[" expression "]")* "[" range_expression "]"
    | hierarchical_variable_identifier "[" range_expression "]"
    | variable_concatenation 

//A.8.6 Operators
UNARY_OPERATOR: "+" | "-" | "!" | "~" | "&" | "~&" | "|" | "~|" | "^" | "~^" | "^~"
BINARY_OPERATOR: "+" | "-" | "*" | "/" | "%" | "==" | "!=" | "===" | "!==" | "&&" | "||" | "**" | "<" | "<=" | ">" | ">=" | "&" | "|" | "^" | "^~" | "~^" | ">>" | "<<" | ">>>" | "<<<"
unary_module_path_operator: "!" | "~" | "&" | "~&" | "|" | "~|" | "^" | "~^" | "^~"
binary_module_path_operator: "==" | "!=" | "&&" | "||" | "&" | "|" | "^" | "^~" | "~^" 

//A.8.7 Numbers
?number: decimal_number
    | octal_number
    | binary_number
    | hex_number
    | real_number real_number
real_number: unsigned_number"."unsigned_number
    | unsigned_number("."unsigned_number)? exp sign? unsigned_number
exp: "e" | "E"
?decimal_number: unsigned_number
    | size? decimal_base unsigned_number
    | size? decimal_base x_digit ("_")*
    | size? decimal_base z_digit ("_")*
binary_number: size? binary_base binary_value
octal_number: size? octal_base octal_value
hex_number: size? hex_base hex_value
!sign: "+" | "-"
size: non_zero_unsigned_number
non_zero_unsigned_number: non_zero_decimal_digit ("_" | DECIMAL_DIGIT)*
?unsigned_number: DECIMAL_DIGIT ("_" | DECIMAL_DIGIT)*
binary_value: DECIMAL_DIGIT ("_" | DECIMAL_DIGIT)*
octal_value: octal_digit ("_" | octal_digit)*
hex_value: hex_digit ("_" | hex_digit)*
decimal_base: "'"("s" | "S" )?"d"
    | "'"("s" | "S")?"D"
binary_base: "'"("s" | "S")?"b"
    | "'"("s" | "S")?"B"
octal_base: "'"("s" | "S")?"o"
    | "'" ("s" | "S")?"O"
hex_base: "'"("s" | "S")?"h"
    | "'"("s" | "S")?"H"
non_zero_decimal_digit:	"1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
DECIMAL_DIGIT: "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
binary_digit: x_digit | z_digit | "0" | "1"
octal_digit: x_digit | z_digit | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7"
hex_digit: x_digit | z_digit | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F"
x_digit: "x" | "X"
z_digit: "z" | "Z" | "?"

//A.8.8 Strings
string: /[^ \t\r\n\f]/

//A.9 General
//A.9.1 Attributes
attribute_instance: "(*" attr_spec ("," attr_spec)* "*)"
attr_spec: attr_name "=" constant_expression
    | attr_name
attr_name: identifier

//A.9.3 Identifiers
arrayed_identifier: simple_arrayed_identifier | escaped_arrayed_identifier
block_identifier: identifier
escaped_identifier: ESCAPED_IDENTIFIER
escaped_arrayed_identifier: escaped_identifier range?
escaped_hierarchical_identifier: escaped_hierarchical_branch ("." simple_hierarchical_branch | "." escaped_hierarchical_branch)*
event_identifier: identifier
function_identifier: identifier
genvar_function_identifier: identifier
genvar_identifier: identifier
hierarchical_block_identifier: hierarchical_identifier
hierarchical_event_identifier: hierarchical_identifier
hierarchical_function_identifier: hierarchical_identifier
?hierarchical_identifier: simple_hierarchical_identifier
    | escaped_hierarchical_identifier
hierarchical_net_identifier: hierarchical_identifier
?hierarchical_variable_identifier: hierarchical_identifier
hierarchical_task_identifier: hierarchical_identifier
identifier: simple_identifier
    | escaped_identifier
inout_port_identifier: identifier
input_port_identifier: identifier
module_identifier: identifier
module_instance_identifier: arrayed_identifier
net_identifier: identifier
output_port_identifier: identifier
parameter_identifier: identifier
port_identifier: identifier
real_identifier: identifier
simple_arrayed_identifier: simple_identifier range?
?simple_hierarchical_identifier: simple_hierarchical_branch ("." escaped_identifier)?
?simple_identifier: CNAME
specparam_identifier: identifier
system_function_identifier: "$[" "a".."z" | "A".."Z" | "0".."9" | "_" | "$" "]"("[" "a".."z" | "A".."Z" | "0".."9" | "_" | "$" "]")* //really not sure about this one...
variable_identifier: identifier

//A.9.4 Identifier branches
!?simple_hierarchical_branch: simple_identifier ("[" unsigned_number "]")? (("." simple_identifier ("[" unsigned_number "]")?)*)?
!?escaped_hierarchical_branch: escaped_identifier ("[" unsigned_number "]")? (("." escaped_identifier ("[" unsigned_number "]")?)*)?

//LARK
ESCAPED_IDENTIFIER: /\\([^\s]+)/  
COMMENT: "//" /[^\n]*/ NEWLINE
NEWLINE: "\n"
MULTILINE_COMMENT: /\/\*(\*(?!\/)|[^*])*\*\//        

%import common.CNAME
%import common.ESCAPED_STRING
%import common.SIGNED_NUMBER
%import common.DECI
%import common.WS

%ignore WS
%ignore COMMENT
%ignore MULTILINE_COMMENT
%ignore NEWLINE